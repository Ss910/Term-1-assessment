# binary search: repeatedly divides the search interval in half and narrowing down the possible locations of the target value
# binary search (iterative)
def binary_search(A, target):
  low = 0
  high = len(A) - 1
  while low <= high: # ensures there are still items in search interval
    mid = (low + high) // 2
    if A[mid] == target:
      return mid
    elif A[mid] < target:
      high = mid - 1
    else:
      low = mid + 1
  return -1

data = [1, 4, 2, 5, 2, 3]
print(binary_search(data, 2)) # output: 2
print(binary_search(data, 6)) # output: -1

# binary search (recursive)
def binary_search(A, target):
  return binary_search_recursive(A, target, 0, len(A) - 1)
def binary_search_recursive(A, target, low, high):
  if low > high:
    return -1
  mid = (low + high) // 2
  if A[mid] == target:
    return mid
  elif A[mid] < target:
    return binary_search_recursive(A, target, mid + 1, high)
  else:
    return binary_search_recursive(A, target, low, mid - 1)

data = [1, 4, 2, 5, 2, 3]
print(binary_search(data, 2)) # output: 2
print(binary_search(data, 6)) # output: -1
